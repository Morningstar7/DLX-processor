library IEEE;
use IEEE.std_logic_1164.all;
use work.myTypes.all;

entity DATAPATH is
	generic (	N:		integer;
			N_ADDR:		integer;
			IMM_SIZE:	integer;
			OP_CODE_SIZE:	integer;
			M:		integer;
			ALUSIZE:	integer);
	port	(	CLK:		in	std_logic;
			RST:		in	std_logic;
			BOLLA:		in	std_logic;
			--FETCH SIGNALS
			EN_PC:		in	std_logic;
			EN_1:		in	std_logic;
			--DECODE SIGNALS
			EN_2:		in	std_logic;
			CONFIRM_JMP:	in	std_logic;
			CONFIRM_BRANCH:	in	std_logic;
			BRANCH_TYPE:	in	std_logic;
			RD1:		in	std_logic;
			RD2:		in	std_logic;
			WR:		in	std_logic;
			SEL_DEST:	in	std_logic;
			--EXECUTE SIGNALS
			EN_3:		in	std_logic;
			ALU_CODE:	in 	std_logic_vector(ALUSIZE-1 downto 0); 
			OP_SEL:		in	std_logic; 
			--MEMORY SIGNALS
			EN_4:		in	std_logic;
			RM:		in	std_logic;
			WM:		in	std_logic;
			--WB SIGNALS
			SEL:		in	std_logic_vector(1 downto 0);
			INSTR:		out	std_logic_vector(N-1 downto 0));
			--HAZARD UNIT SIGNALS
end DATAPATH;

architecture RTL of DATAPATH is

	component FETCH
		generic (	N:		integer);
		port (		JUMP_ADDR:	in 	std_logic_vector(N-1 downto 0);		--ADDRESS FOR BRANCHING AND JUMPING
				BRANCH_SEL:	in	std_logic;
				EN:		in	std_logic;
				RST:		in	std_logic;
				CLK:		in	std_logic;
				NPC: 		out	std_logic_vector(N-1 downto 0);		--NEW PROGRAM COUNTER
				INSTRUCTION:	out	std_logic_vector(n-1 downto 0));	--INSTRUCTION OUT
	end component;

	component DECODE
		generic (	N:		integer;
				N_ADDR:		integer;
				IMM_SIZE:	integer;
				OP_CODE_SIZE:	integer);
		port	(	CLK:		in	std_logic;
				INSTRUCTION:	in	std_logic_vector(N-1 downto 0);
				NPC:		in	std_logic_vector(N-1 downto 0);
				CONFIRM_JMP:	in	std_logic;
				CONFIRM_BRANCH:	in	std_logic;
				BRANCH_TYPE:	in	std_logic;
				EN:		in	std_logic;
				RST:		in	std_logic;
				RD1:		in	std_logic;
				RD2:		in	std_logic;
				WR:		in	std_logic;
				SEL_DEST:	in	std_logic;
				DATA_IN:	in	std_logic_vector(N-1 downto 0);
				ADDR_WR:	in	std_logic_vector(N_ADDR-1 downto 0);
				PC_SEL_MUX:	out	std_logic;
				NPC_ADDED:	out	std_logic_vector(N-1 downto 0);
				REG_A:		out	std_logic_vector(N-1 downto 0);
				REG_B:		out	std_logic_vector(N-1 downto 0);
				IMMEDIATE:	out	std_logic_vector(N-1 downto 0);
				DEST_REG:	out	std_logic_vector(N_ADDR-1 downto 0));
	end component;

	component EXECUTE
		generic (	N:		integer;
				N_ADDR:		integer;
				ALUSIZE:	integer);
		port	(	REG_A:		in	std_logic_vector(N-1 downto 0);
				REG_B:		in	std_logic_vector(N-1 downto 0);
				IMMEDIATE:	in	std_logic_vector(N-1 downto 0);
				DEST_REG_IN:	in	std_logic_vector(N_ADDR-1 downto 0);
				ALU_CODE:	in 	std_logic_vector(ALUSIZE-1 downto 0);
				OP_SEL_B:	in	std_logic;
				DEST_REG_OUT:	out	std_logic_vector(N_ADDR-1 downto 0);
				OUTPUT_ALU:	out	std_logic_vector(N-1 downto 0);
				REG_B_OUT:	out	std_logic_vector(N-1 downto 0));
	end component;

	component MEMORY
		generic (	N:	integer;
				N_ADDR:	integer;
				M:	integer);
		port	(	IN_ALU:		in	std_logic_vector(N-1 downto 0);
				DEST_REG_IN:	in	std_logic_vector(N-1 downto 0);
				REG_B_IN:	in	std_logic_vector(N-1 downto 0);
				RESET:		in	std_logic;
				ENABLE:		in	std_logic;
				RM:		in	std_logic;
				WM:		in	std_logic;
				DEST_REG_OUT:	out	std_logic_vector(N_ADDR-1 downto 0);
				MEMORY_OUT:	out	std_logic_vector(N_ADDR-1 downto 0);
				OUT_ALU:	out	std_logic_vector(N-1 downto 0));
	end component;

	component WB
		generic (	N: 	integer;
				N_ADDR:	integer);
		port (		IN_MEM:		in	std_logic_vector(N-1 downto 0);
				IN_ALU:		in	std_logic_vector(N-1 downto 0);
				IN_NPC:		in	std_logic_vector(N-1 downto 0);
				SEL:		in	std_logic_vector(1 downto 0);
				DEST_REG_IN:	in	std_logic_vector(N_ADDR-1 downto 0);
				DEST_REG_OUT:	out	std_logic_vector(N_ADDR-1 downto 0);
				OUT_WB:		out	std_logic_vector(N-1 downto 0));
	end component;

	component REG
		generic (	N:	integer);
		port (		D: 	in 	std_logic_vector(N-1 downto 0);
				Q: 	out	std_logic_vector(N-1 downto 0);
				EN:	in	std_logic;
				RST:	in 	std_logic;
				CLK: 	in	std_logic);
	end component;

	-- FETCH SIGNALS
	signal BRANCH_SEL_DECODE_FETCH:	std_logic;
	signal NPC_DECODE_OUT_FETCH_IN:	std_logic_vector(N-1 downto 0);
	signal NPC_FETCH_OUT:		std_logic_vector(N-1 downto 0);
	signal INSTRUCTION_FETCH_OUT:	std_logic_vector(N-1 downto 0);

	-- DECODE SIGNALS
	signal INSTRUCTION_DECODE_IN:	std_logic_vector(N-1 downto 0);
	signal NPC_DECODE_IN:		std_logic_vector(N-1 downto 0);
	signal DATA_DECODE_IN:		std_logic_vector(N-1 downto 0);
	signal ADDR_WR_DECODE_IN:	std_logic_vector(N_ADDR-1 downto 0);
	signal REG_A_DECODE_OUT:	std_logic_vector(N-1 downto 0);
	signal REG_B_DECODE_OUT:	std_logic_vector(N-1 downto 0);
	signal IMMEDIATE_DECODE_OUT:	std_logic_vector(N-1 downto 0);
	signal DEST_REG_DECODE_OUT:	std_logic_vector(N_ADDR-1 downto 0);
	
	-- EXECUTE SIGNALS
	signal REG_A_EXECUTE_IN:	std_logic_vector(N-1 downto 0);
	signal REG_B_EXECUTE_IN:	std_logic_vector(N-1 downto 0);
	signal IMMEDIATE_EXECUTE_IN:	std_logic_vector(N-1 downto 0);
	signal DEST_REG_EXECUTE_IN:	std_logic_vector(N_ADDR-1 downto 0);
	signal DEST_REG_EXECUTE_OUT:	std_logic_vector(N_ADDR-1 downto 0);
	signal ALU_EXECUTE_OUT:		std_logic_vector(N-1 downto 0);
	signal REG_B_EXECUTE_OUT:	std_logic_vector(N-1 downto 0);
	signal NPC_OUT_EX_IN_MEM: 	std_logic_vector(N-1 downto 0);
	--signal OP_SEL_B_SIG:		std_logic_vector(2 downto 0);
	
	-- MEMORY SIGNALS
	signal DEST_REG_MEM_IN:		std_logic_vector(N_ADDR-1 downto 0);
	signal ALU_MEM_IN:		std_logic_vector(N-1 downto 0);
	signal REG_B_MEM_IN:		std_logic_vector(N-1 downto 0);
	signal DEST_REG_MEM_OUT:	std_logic_vector(N_ADDR-1 downto 0);
	signal MEMORY_OUT_MEM_OUT:	std_logic_vector(N-1 downto 0);
	signal OUT_ALU_MEM_OUT:		std_logic_vector(N-1 downto 0);
	signal NPC_OUT_MEM_IN_WB:	std_logic_vector(N-1 downto 0); 
	
	-- WRITEBACK SIGNALS
	signal DEST_REG_WB_IN:		std_logic_vector(N_ADDR-1 downto 0);
	signal MEMORY_OUT_WB_IN:	std_logic_vector(N-1 downto 0);
	signal OUT_ALU_WB_IN:		std_logic_vector(N-1 downto 0);
	signal NPC_OUT_WB_IN:		std_logic_vector(N-1 downto 0);
	signal REG_ENABLE:		std_logic;
	--FORWARDING SIGNALS

	begin
	
	REG_ENABLE <= not BOLLA;

		--INSTANCE OF THE FETCH
		INST_FETCH: FETCH	generic map (	N => N)
					port map (	JUMP_ADDR => NPC_DECODE_OUT_FETCH_IN,
							BRANCH_SEL => BRANCH_SEL_DECODE_FETCH,
							EN => EN_PC,
							RST => RST,
							CLK => CLK,
							NPC => NPC_FETCH_OUT,
							INSTRUCTION => INSTRUCTION_FETCH_OUT);

		INSTR <= INSTRUCTION_FETCH_OUT;

		--PIPELINE FETCH DECODE
		PIPE_IF_ID_NPC: REG	generic map (	N => N)
					port map (	D => NPC_FETCH_OUT,
							Q => NPC_DECODE_IN,
							EN => REG_ENABLE,
							RST => RST,
							CLK => CLK);

		PIPE_IF_ID_INSTRUCTION: REG	generic map (	N => N)
						port map (	D => INSTRUCTION_FETCH_OUT,
								Q => INSTRUCTION_DECODE_IN,
								EN => REG_ENABLE,
								RST => RST,
								CLK => CLK);

		--INSTANCE OF THE DECODE
		INST_DECODE: DECODE	generic map (	N => N,
							N_ADDR => N_ADDR,
							IMM_SIZE => IMM_SIZE,
							OP_CODE_SIZE => OP_CODE_SIZE)
					port map (	CLK => CLK,
							INSTRUCTION => INSTRUCTION_DECODE_IN,
							NPC => NPC_DECODE_IN,
							CONFIRM_JMP => CONFIRM_JMP,
							CONFIRM_BRANCH => CONFIRM_BRANCH,
							BRANCH_TYPE => BRANCH_TYPE,
							EN => EN_2,
							RST => RST,
							RD1 => RD1,
							RD2 => RD2,
							WR => WR,
							SEL_DEST => SEL_DEST,
							DATA_IN => DATA_DECODE_IN,
							ADDR_WR => ADDR_WR_DECODE_IN,
							PC_SEL_MUX => BRANCH_SEL_DECODE_FETCH,
							NPC_ADDED => NPC_DECODE_OUT_FETCH_IN,
							REG_A => REG_A_DECODE_OUT,
							REG_B => REG_B_DECODE_OUT,
							IMMEDIATE => IMMEDIATE_DECODE_OUT,
							DEST_REG => DEST_REG_DECODE_OUT);

		--BEGIN PIPELINE DECODE EXECUTE
		--**********************
		PIPE_ID_EX_REG_A: REG	generic map (	N => N)
					port map (	D => REG_A_DECODE_OUT,
							Q => REG_A_EXECUTE_IN,
							EN => REG_ENABLE,
							RST => RST,
							CLK => CLK);

		PIPE_ID_EX_REG_B: REG	generic map (	N => N)
					port map (	D => REG_B_DECODE_OUT,
							Q => REG_B_EXECUTE_IN,
							EN => REG_ENABLE,
							RST => RST,
							CLK => CLK);

		PIPE_ID_EX_IMMEDIATE: REG	generic map (	N => N)
						port map (	D => IMMEDIATE_DECODE_OUT,
								Q => IMMEDIATE_EXECUTE_IN,
								EN => REG_ENABLE,
								RST => RST,
								CLK => CLK);

		PIPE_ID_EX_DEST_REG: REG	generic map (	N => N_ADDR)
						port map (	D => DEST_REG_DECODE_OUT,
								Q => DEST_REG_EXECUTE_IN,
								EN => REG_ENABLE,
								RST => RST,
								CLK => CLK);

		PIPE_ID_EX_OUT_NPC: REG		generic map (	N => N)
						port map (	D => NPC_DECODE_IN,
								Q => NPC_OUT_EX_IN_MEM,
								EN => REG_ENABLE,
								RST => RST,
								CLK => CLK);

		
		--**********************
		--END PIPELINE DECODE EXECUTE

		--INSTANCE OF THE EXECUTE
		INST_EXECUTE: EXECUTE	generic map (	N => N,
							N_ADDR => N_ADDR,
							ALUSIZE => ALUSIZE)
					port map (	REG_A => REG_A_EXECUTE_IN,
							REG_B => REG_B_EXECUTE_IN,
							IMMEDIATE => IMMEDIATE_EXECUTE_IN,
							DEST_REG_IN => DEST_REG_EXECUTE_IN,
							ALU_CODE => ALU_CODE,
							OP_SEL_B => OP_SEL,		--> CONCATENATION AT THE END OF FILE
							DEST_REG_OUT => DEST_REG_EXECUTE_OUT,
							OUTPUT_ALU => ALU_EXECUTE_OUT,
							REG_B_OUT => REG_B_EXECUTE_OUT);

		--BEGIN PIPELINE EXECUTE MEMORY
		--**********************
		PIPE_EX_MEM_DEST_REG: REG	generic map (	N => N_ADDR)
						port map (	D => DEST_REG_EXECUTE_OUT,
								Q => DEST_REG_MEM_IN,
								EN => REG_ENABLE,
								RST => RST,
								CLK => CLK);

		PIPE_EX_MEM_OUTPUT_ALU: REG	generic map (	N => N)
						port map (	D => ALU_EXECUTE_OUT,
								Q => ALU_MEM_IN,
								EN => REG_ENABLE;
								RST => RST,
								CLK => CLK);

		PIPE_EX_MEM_REG_B: REG	generic map (	N => N)
					port map (	D => REG_B_EXECUTE_OUT,
							Q => REG_B_MEM_IN,
							EN => REG_ENABLE,
							RST => RST,
							CLK => CLK);

		PIPE_EX_MEM_OUT_NPC : REG  generic map (N => N)
					port map (	D => NPC_OUT_EX_IN_MEM,
							Q => NPC_OUT_MEM_IN_WB,
							EN => REG_ENABLE,
							RST => RST,
							CLK => CLK);
		--**********************
		--END PIPELINE EXECUTE MEMORY

		--INSTANCE OF THE MEMORY
		INST_MEMORY: MEMORY	generic map (	N => N,
							N_ADDR => N_ADDR,
							M => M)
					port map (	IN_ALU => ALU_MEM_IN,
							DEST_REG_IN => DEST_REG_MEM_IN,
							REG_B_IN => REG_B_MEM_IN,
							RESET => RST,
							ENABLE => EN_4,
							RM => RM,
							WM => WM,
							DEST_REG_OUT => DEST_REG_MEM_OUT,
							MEMORY_OUT => MEMORY_OUT_MEM_OUT,
							OUT_ALU => OUT_ALU_MEM_OUT);

		--BEGIN PIPELINE MEMORY WRITEBACK
		--**********************
		PIPE_MEM_WB_DEST_REG: REG	generic map (	N => N_ADDR)
						port map (	D => DEST_REG_MEM_OUT,
								Q => DEST_REG_WB_IN,
								EN => EN_4,
								RST => RST,
								CLK => CLK);

		PIPE_MEM_WB_MEMORY_OUT: REG	generic map (	N => N)
						port map (	D => MEMORY_OUT_MEM_OUT,
								Q => MEMORY_OUT_WB_IN,
								EN => EN_4,
								RST => RST,
								CLK => CLK);

		PIPE_MEM_WB_OUT_ALU: REG	generic map (	N => N)
						port map (	D => OUT_ALU_MEM_OUT,
								Q => OUT_ALU_WB_IN,
								EN => EN_4,
								RST => RST,
								CLK => CLK);
		
		PIPE_MEM_WB_OUT_NPC: REG	generic map (	N => N)
						port map (	D => NPC_OUT_MEM_IN_WB,
								Q => NPC_OUT_WB_IN,
								EN => EN_4,
								RST => RST,
								CLK => CLK);
		--**********************
		--END PIPELINE MEMORY WRITEBACK

		--INSTANCE OF THE WRITEBACK
		INST_WB: WB	generic map (	N => N,
						N_ADDR => N_ADDR)
				port map (	IN_MEM => MEMORY_OUT_WB_IN,
						IN_ALU => OUT_ALU_WB_IN,
						IN_NPC => NPC_OUT_WB_IN,
						SEL => SEL,
						DEST_REG_IN => DEST_REG_WB_IN,
						DEST_REG_OUT => ADDR_WR_DECODE_IN,
						OUT_WB => DATA_DECODE_IN);

		--ASSOCIATING THE FORWARD SIGNALS
		--######################

		--######################

		--FORWARDING UNIT
		--######################

end RTL;